<?xml version="1.0" encoding="utf-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
					 xmlns:xs="http://www.w3.org/2001/XMLSchema"
					 >

	<xs:complexType name="Entry">
		<xs:annotation>
			<xs:documentation>
				Базовый тип, содержащий обязательные атрибуты всех остальных Entry.
				Entry — единица, которую можно отредактировать и этот факт будет отражен в истории изменений.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="id" type="xs:ID" use="required" />
		<xs:attribute name="approvedBy" type="xs:string" use="optional"/>
		<xs:attribute name="approvedWhen" type="xs:dateTime" use="optional" />
		<xs:attribute name="author" type="xs:string" use="required" />
		<xs:attribute name="version" type="xs:decimal" use="required" />
		<xs:attribute name="deleted" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="timestamp" type="xs:dateTime" use="required" />
	</xs:complexType>

	<xs:complexType name="WordEntry">
		<xs:complexContent>
			<xs:extension base="Entry">
				<xs:sequence>
					<xs:element minOccurs="1" maxOccurs="1" name="word" type="xs:string" />
					<xs:element minOccurs="0" maxOccurs="1" name="grammar" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								По классификации Зализняка в нотации wiktionary http://ru.wiktionary.org/wiki/Викисловарь:Использование_словаря_Зализняка 
								Печь-существительное и печь-глагол должны попасть в разные WordEntry.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="accent" type="xs:unsignedByte" />
					<xs:element minOccurs="0" maxOccurs="unbounded" name="url" type="xs:anyURI" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="Mark">
		<xs:annotation>
			<xs:documentation>Пометы: устар., разг., ... </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<!-- TODO: Нужно сделать перечисление-->
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="SynsetEntry">
		<xs:complexContent>
			<xs:extension base="Entry">
				<xs:sequence>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="word">
						<xs:complexType>
							<xs:sequence minOccurs="0" maxOccurs="1">
								<xs:element minOccurs="0" maxOccurs="unbounded" name="mark" type="Mark"/>
								<xs:element minOccurs="0" maxOccurs="unbounded" name="sample">
									<xs:complexType>
										<xs:simpleContent>
											<xs:extension base="xs:string">
												<xs:attribute name="url" type="xs:anyURI" use="optional" />
												<xs:attribute name="source" type="xs:string" use="optional">
													<xs:annotation>
														<xs:documentation>Источник, не имеющий URL-а. Например, "Толковый словарь Ушакова"</xs:documentation>
													</xs:annotation>
												</xs:attribute>
											</xs:extension>
										</xs:simpleContent>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="ref" type="xs:IDREF" use="required" />
							<xs:attribute name="nonStandardGrammar" type="xs:boolean" use="optional" default="false">
								<xs:annotation>
									<xs:documentation>
										Пометка о том, что в этом смысле, грамматическая информация как-то искажается. 
										Например, часы в смысле прибора, показывающего время, не имеют единственного числа.
										Решили пока не придумывать способ кодирования этой информации, а просто помечать такие слова, 
										чтобы потом можно будет вернуться и разработать способ кодирования, глядя на накопленные примеры.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
					<xs:element minOccurs="1" maxOccurs="unbounded" name="definition">
						<xs:complexType>
							<xs:simpleContent>
								<xs:extension base="xs:string">
									<xs:attribute name="url" type="xs:anyURI" use="optional" />
									<xs:attribute name="source" type="xs:string" use="optional" />
								</xs:extension>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="1" name="pwn">
						<xs:annotation>
							<xs:documentation>Номер соответсвтующего синсета в Принстанском wordnet-е</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:attribute name="synsetId" type="xs:string" use="required" />
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="SynsetRelationEntry">
		<xs:complexContent>
			<xs:extension base="Entry">
				<xs:attribute name="synset1" type="xs:IDREF" use="required" />
				<xs:attribute name="type" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="is_a" />
							<xs:enumeration value="part_of" />
							<xs:enumeration value="antonym" />
							<xs:enumeration value="sister">
								<xs:annotation>
									<xs:documentation>
										Например, вилка и ложка. Видимо, это некоторая избыточность. Например, вилка и ложка должны быть оба "is_a столовые приборы".
										Но избыточность полезная. Гораздо проще поставить sister между существующими синсетами, чем добавлять синсет-обобщение.
									</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="synset2" type="xs:IDREF" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="WordRelationEntry">
		<xs:complexContent>
			<xs:extension base="Entry">
				<xs:attribute name="word1" type="xs:IDREF" use="required" />
				<xs:attribute name="type" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<!-- TODO: создать перечисление -->
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="word2" type="xs:IDREF" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="yarn">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="words">
					<xs:complexType>
						<xs:sequence>
							<xs:element minOccurs="0" maxOccurs="unbounded" name="wordEntry" type="WordEntry" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="synsets">
					<xs:complexType>
						<xs:sequence>
							<xs:element minOccurs="0" maxOccurs="unbounded" name="synsetEntry" type="SynsetEntry"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="synsetRelations">
					<xs:complexType>
						<xs:sequence>
							<xs:element minOccurs="0" maxOccurs="unbounded" name="relationEntry" type="SynsetRelationEntry" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="wordRelations">
					<xs:complexType>
						<xs:sequence>
							<xs:element minOccurs="0" maxOccurs="unbounded" name="wordRelationsEntry" type="WordRelationEntry"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>